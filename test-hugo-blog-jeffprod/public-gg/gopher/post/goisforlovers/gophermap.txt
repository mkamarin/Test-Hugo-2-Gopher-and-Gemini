
[[[=> page:page,copyPage:<no value>,keepRaw:<no value>,removeExtras:<no value>,ignoreLinks:<no value>,fullLine:false,textChar:false,host:null.host,port:70<=]]]

i(Hu)go Template Primer
i
iApril 2014 Â· 7 minute read

iPosted in:  go, golang, templates, themes, development, 

i

i
iHugo uses the excellent [Go][] [html/template][gohtmltemplate] library for
iits template engine. It is an extremely lightweight engine that provides a very
ismall amount of logic. In our experience that it is just the right amount of
ilogic to be able to create a good static website. If you have used other
itemplate systems from different languages or frameworks you will find a lot of
isimilarities in Go templates.
i
iThis document is a brief primer on using Go templates. The [Go docs][gohtmltemplate]
iprovide more details.
i
i## Introduction to Go Templates
i
iGo templates provide an extremely simple template language. It adheres to the
ibelief that only the most basic of logic belongs in the template or view layer.
iOne consequence of this simplicity is that Go templates parse very quickly.
i
iA unique characteristic of Go templates is they are content aware. Variables and
icontent will be sanitized depending on the context of where they are used. More
idetails can be found in the [Go docs][gohtmltemplate].
i
i## Basic Syntax
i
iGolang templates are HTML files with the addition of variables and
ifunctions.
i
i**Go variables and functions are accessible within {{ }}**
i
iAccessing a predefined variable "foo":
i
i    {{ foo }}
i
i**Parameters are separated using spaces**
i
iCalling the add function with input of 1, 2:
i
i    {{ add 1 2 }}
i
i**Methods and fields are accessed via dot notation**
i
iAccessing the Page Parameter "bar"
i
i    {{ .Params.bar }}
i
i**Parentheses can be used to group items together**
i
i    {{ if or (isset .Params "alt") (isset .Params "caption") }} Caption {{ end }}
i
i
i## Variables
i
iEach Go template has a struct (object) made available to it. In hugo each
itemplate is passed either a page or a node struct depending on which type of
ipage you are rendering. More details are available on the
i[variables](/layout/variables) page.
i
iA variable is accessed by referencing the variable name.
i
i    <title>{{ .Title }}</title>
i
iVariables can also be defined and referenced.
i
i    {{ $address := "123 Main St."}}
i    {{ $address }}
i
i
i## Functions
i
iGo template ship with a few functions which provide basic functionality. The Go
itemplate system also provides a mechanism for applications to extend the
iavailable functions with their own. [Hugo template
ifunctions](/layout/functions) provide some additional functionality we believe
iare useful for building websites. Functions are called by using their name
ifollowed by the required parameters separated by spaces. Template
ifunctions cannot be added without recompiling hugo.
i
i**Example:**
i
i    {{ add 1 2 }}
i
i## Includes
i
iWhen including another template you will pass to it the data it will be
iable to access. To pass along the current context please remember to
iinclude a trailing dot. The templates location will always be starting at
ithe /layout/ directory within Hugo.
i
i**Example:**
i
i    {{ template "chrome/header.html" . }}
i
i
i## Logic
i
iGo templates provide the most basic iteration and conditional logic.
i
i### Iteration
i
iJust like in Go, the Go templates make heavy use of range to iterate over
ia map, array or slice. The following are different examples of how to use
irange.
i
i**Example 1: Using Context**
i
i    {{ range array }}
i        {{ . }}
i    {{ end }}
i
i**Example 2: Declaring value variable name**
i
i    {{range $element := array}}
i        {{ $element }}
i    {{ end }}
i
i**Example 2: Declaring key and value variable name**
i
i    {{range $index, $element := array}}
i        {{ $index }}
i        {{ $element }}
i    {{ end }}
i
i### Conditionals
i
iIf, else, with, or, & and provide the framework for handling conditional
ilogic in Go Templates. Like range, each statement is closed with `end`.
i
i
iGo Templates treat the following values as false:
i
i* false
i* 0
i* any array, slice, map, or string of length zero
i
i**Example 1: If**
i
i    {{ if isset .Params "title" }}<h4>{{ index .Params "title" }}</h4>{{ end }}
i
i**Example 2: If -> Else**
i
i    {{ if isset .Params "alt" }}
i        {{ index .Params "alt" }}
i    {{else}}
i        {{ index .Params "caption" }}
i    {{ end }}
i
i**Example 3: And & Or**
i
i    {{ if and (or (isset .Params "title") (isset .Params "caption")) (isset .Params "attr")}}
i
i**Example 4: With**
i
iAn alternative way of writing "if" and then referencing the same value
iis to use "with" instead. With rebinds the context `.` within its scope,
iand skips the block if the variable is absent.
i
iThe first example above could be simplified as:
i
i    {{ with .Params.title }}<h4>{{ . }}</h4>{{ end }}
i
i**Example 5: If -> Else If**
i
i    {{ if isset .Params "alt" }}
i        {{ index .Params "alt" }}
i    {{ else if isset .Params "caption" }}
i        {{ index .Params "caption" }}
i    {{ end }}
i
i## Pipes
i
iOne of the most powerful components of Go templates is the ability to
istack actions one after another. This is done by using pipes. Borrowed
ifrom unix pipes, the concept is simple, each pipeline's output becomes the
iinput of the following pipe.
i
iBecause of the very simple syntax of Go templates, the pipe is essential
ito being able to chain together function calls. One limitation of the
ipipes is that they only can work with a single value and that value
ibecomes the last parameter of the next pipeline.
i
iA few simple examples should help convey how to use the pipe.
i
i**Example 1 :**
i
i    {{ if eq 1 1 }} Same {{ end }}
i
iis the same as
i
i    {{ eq 1 1 | if }} Same {{ end }}
i
iIt does look odd to place the if at the end, but it does provide a good
iillustration of how to use the pipes.
i
i**Example 2 :**
i
i    {{ index .Params "disqus_url" | html }}
i
iAccess the page parameter called "disqus_url" and escape the HTML.
i
i**Example 3 :**
i
i    {{ if or (or (isset .Params "title") (isset .Params "caption")) (isset .Params "attr")}}
i    Stuff Here
i    {{ end }}
i
iCould be rewritten as
i
i    {{  isset .Params "caption" | or isset .Params "title" | or isset .Params "attr" | if }}
i    Stuff Here
i    {{ end }}
i
i
i## Context (aka. the dot)
i
iThe most easily overlooked concept to understand about Go templates is that {{ . }}
ialways refers to the current context. In the top level of your template this
iwill be the data set made available to it. Inside of a iteration it will have
ithe value of the current item. When inside of a loop the context has changed. .
iwill no longer refer to the data available to the entire page. If you need to
iaccess this from within the loop you will likely want to set it to a variable
iinstead of depending on the context.
i
i**Example:**
i
i      {{ $title := .Site.Title }}
i      {{ range .Params.tags }}
i        <li> <a href="{{ $baseurl }}/tags/{{ . | urlize }}">{{ . }}</a> - {{ $title }} </li>
i      {{ end }}
i
iNotice how once we have entered the loop the value of {{ . }} has changed. We
ihave defined a variable outside of the loop so we have access to it from within
ithe loop.
i
i# Hugo Parameters
i
iHugo provides the option of passing values to the template language
ithrough the site configuration (for sitewide values), or through the meta
idata of each specific piece of content. You can define any values of any
itype (supported by your front matter/config format) and use them however
iyou want to inside of your templates.
i
i
i## Using Content (page) Parameters
i
iIn each piece of content you can provide variables to be used by the
itemplates. This happens in the [front matter](/content/front-matter).
i
iAn example of this is used in this documentation site. Most of the pages
ibenefit from having the table of contents provided. Sometimes the TOC just
idoesn't make a lot of sense. We've defined a variable in our front matter
iof some pages to turn off the TOC from being displayed.
i
iHere is the example front matter:
i
i```
i---
ititle: "Permalinks"
idate: "2013-11-18"
ialiases:
i  - "/doc/permalinks/"
igroups: ["extras"]
igroups_weight: 30
inotoc: true
i---
i```
i
iHere is the corresponding code inside of the template:
i
i      {{ if not .Params.notoc }}
i        <div id="toc" class="well col-md-4 col-sm-6">
i        {{ .TableOfContents }}
i        </div>
i      {{ end }}
i
i
i
i## Using Site (config) Parameters
iIn your top-level configuration file (eg, `config.yaml`) you can define site
iparameters, which are values which will be available to you in chrome.
i
iFor instance, you might declare:
i
i```yaml
iparams:
i  CopyrightHTML: "Copyright &#xA9; 2013 John Doe. All Rights Reserved."
i  TwitterUser: "spf13"
i  SidebarRecentLimit: 5
i```
i
iWithin a footer layout, you might then declare a `<footer>` which is only
iprovided if the `CopyrightHTML` parameter is provided, and if it is given,
iyou would declare it to be HTML-safe, so that the HTML entity is not escaped
iagain.  This would let you easily update just your top-level config file each
iJanuary 1st, instead of hunting through your templates.
i
i```
i{{if .Site.Params.CopyrightHTML}}<footer>
i<div class="text-center">{{.Site.Params.CopyrightHTML | safeHtml}}</div>
i</footer>{{end}}
i```
i
iAn alternative way of writing the "if" and then referencing the same value
iis to use "with" instead. With rebinds the context `.` within its scope,
iand skips the block if the variable is absent:
i
i```
i{{with .Site.Params.TwitterUser}}<span class="twitter">
i<a href="https://twitter.com/{{.}}" rel="author">
i<img src="/images/twitter.png" width="48" height="48" title="Twitter: {{.}}"
i alt="Twitter"></a>
i</span>{{end}}
i```
i
iFinally, if you want to pull "magic constants" out of your layouts, you can do
iso, such as in this example:
i
i```
i<nav class="recent">
i  <h1>Recent Posts</h1>
i  <ul>{{range first .Site.Params.SidebarRecentLimit .Site.Recent}}
i    <li><a href="{{.RelPermalink}}">{{.Title}}</a></li>
i  {{end}}</ul>
i</nav>
i```
i
i
i[go]: https://golang.org/
i[gohtmltemplate]: https://golang.org/pkg/html/template/
i

[[[=> references <=]]]




iSite sections:
1Home	/
1Posts	/posts/
1About	/about/
1(Hu)go Template Primer	/gopher/post/goisforlovers/gophermap.txt
1About Hugo	/gopher/about/gophermap.txt
1Getting Started with Hugo	/gopher/post/hugoisforlovers/gophermap.txt
1tutorials	
i



1categories:	/categories

1development	/categories/development/

1golang	/categories/golang/


1tags:	/tags

1development	/tags/development/

1go	/tags/go/

1golang	/tags/golang/

1hugo	/tags/hugo/

1templates	/tags/templates/

1themes	/tags/themes/






iSocial media links:


hGithub	URL:https://github.com/my-account/

hMail	URL:mailto:my-name@example.org



i


1Return to main page	/
i



i Test Name 
icopyright 2021

